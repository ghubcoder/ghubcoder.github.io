<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RP2040 on ghubcoder</title>
    <link>https://ghubcoder.github.io/tags/rp2040/</link>
    <description>Recent content in RP2040 on ghubcoder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; ghubcoder</copyright>
    <lastBuildDate>Sun, 14 Aug 2022 12:00:00 +0000</lastBuildDate><atom:link href="https://ghubcoder.github.io/tags/rp2040/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using multiple cores with the Pico and FreeRTOS</title>
      <link>https://ghubcoder.github.io/posts/using-multiple-cores-pico-freertos/</link>
      <pubDate>Sun, 14 Aug 2022 12:00:00 +0000</pubDate>
      
      <guid>https://ghubcoder.github.io/posts/using-multiple-cores-pico-freertos/</guid>
      <description>Using multiple cores with FreeRTOS and the Pico FreeRTOS is a real time operating system kernel which is designed for embedded devices, such as the Raspberry Pico. This article will give a brief overview of how this can be used on the Pico with an example repository.
TLDR Git repo can be found here
 Scheduling on multiple cores Lets say you&amp;rsquo;re looking to use your Pico to monitor data being received on one GPIO pin, whilst a the same time trying to provide output on that data, say via an OLED display.</description>
    </item>
    
    <item>
      <title>Pico-W Deep Sleep with Micropython</title>
      <link>https://ghubcoder.github.io/posts/pico-w-deep-sleep-with-micropython/</link>
      <pubDate>Sun, 07 Aug 2022 17:30:00 +0000</pubDate>
      
      <guid>https://ghubcoder.github.io/posts/pico-w-deep-sleep-with-micropython/</guid>
      <description>Pico-W Deep Sleep with Micropython The last post of this series discussed how a simple mod for Micropython could be developed to support deep sleeping. This post will briefly discuss how this can also now be used with the Pico-W with a short code example.
.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip{background:#e6f9e6}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:0.125em;position:relative} Note
Deep sleeping and waking from the onboard clock has been merged into Micropython directly with this PR.</description>
    </item>
    
    <item>
      <title>Deep sleeping the Raspberry Pico with Micropython</title>
      <link>https://ghubcoder.github.io/posts/deep-sleeping-the-pico-micropython/</link>
      <pubDate>Wed, 27 Oct 2021 18:30:00 +0000</pubDate>
      
      <guid>https://ghubcoder.github.io/posts/deep-sleeping-the-pico-micropython/</guid>
      <description>Deep sleeping the Raspberry Pico with Micropython The first post of this series discussed how you can put your pico into a deep sleep state and wake it at some point later using the internal real time clock, using the c programming language. Here we will discuss a solution to allow the same technique to be used with Micropython.
TLDR Skip to release and example here
 Micropython Whilst the first approached used C, Micropython however is heavily promoted by many of the getting started guides you will find for the Pico such as this one found here.</description>
    </item>
    
    <item>
      <title>Waking the Pico with an external trigger</title>
      <link>https://ghubcoder.github.io/posts/waking-the-pico-external-trigger/</link>
      <pubDate>Mon, 26 Jul 2021 17:45:51 +0000</pubDate>
      
      <guid>https://ghubcoder.github.io/posts/waking-the-pico-external-trigger/</guid>
      <description>Waking the Pico with an external trigger In the last post we discussed how you can put your pico to sleep and wake it using the in built clock, bringing everything back into a usable state after waking.
As we noted last time, the Pico has two sleep modes, known as dormant and sleep. According to the official datasheet, the sleep mode draws 1.3mA on average at 25c where as dormant mode draws around 0.</description>
    </item>
    
    <item>
      <title>Awaking the Raspberry Pico from deep sleep</title>
      <link>https://ghubcoder.github.io/posts/awaking-the-pico/</link>
      <pubDate>Fri, 19 Feb 2021 09:52:51 +0000</pubDate>
      
      <guid>https://ghubcoder.github.io/posts/awaking-the-pico/</guid>
      <description>Awaking the Raspberry Pico from deep sleep The Raspberry Pico was released in Jan 2021, and retails for around $4. It has a Dual-core Arm Cortex-M0+ processor (RP2040), flexible clock running up to 133 MHz and 264KB internal RAM.
This is a short overview of how you might reduce the power consumption of your Pico to a very low level, around 1.3mA at 25c according to the official datasheet.
This is useful for periodically performing some work, consuming minimal power whilst we are sleeping.</description>
    </item>
    
  </channel>
</rss>
