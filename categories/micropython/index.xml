<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Micropython on ghubcoder</title>
    <link>https://ghubcoder.github.io/categories/micropython/</link>
    <description>Recent content in Micropython on ghubcoder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; ghubcoder</copyright>
    <lastBuildDate>Sun, 07 Aug 2022 17:30:00 +0000</lastBuildDate><atom:link href="https://ghubcoder.github.io/categories/micropython/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pico-W Deep Sleep with Micropython</title>
      <link>https://ghubcoder.github.io/posts/pico-w-deep-sleep-with-micropython/</link>
      <pubDate>Sun, 07 Aug 2022 17:30:00 +0000</pubDate>
      
      <guid>https://ghubcoder.github.io/posts/pico-w-deep-sleep-with-micropython/</guid>
      <description>Pico-W Deep Sleep with Micropython The last post of this series discussed how a simple mod for Micropython could be developed to support deep sleeping. This post will briefly discuss how this can also now be used with the Pico-W with a short code example.
.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip{background:#e6f9e6}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:0.125em;position:relative} Note
Deep sleeping and waking from the onboard clock has been merged into Micropython directly with this PR.</description>
    </item>
    
    <item>
      <title>Deep sleeping the Raspberry Pico with Micropython</title>
      <link>https://ghubcoder.github.io/posts/deep-sleeping-the-pico-micropython/</link>
      <pubDate>Wed, 27 Oct 2021 18:30:00 +0000</pubDate>
      
      <guid>https://ghubcoder.github.io/posts/deep-sleeping-the-pico-micropython/</guid>
      <description>Deep sleeping the Raspberry Pico with Micropython The first post of this series discussed how you can put your pico into a deep sleep state and wake it at some point later using the internal real time clock, using the c programming language. Here we will discuss a solution to allow the same technique to be used with Micropython.
TLDR Skip to release and example here
Â Micropython Whilst the first approached used C, Micropython however is heavily promoted by many of the getting started guides you will find for the Pico such as this one found here.</description>
    </item>
    
  </channel>
</rss>
